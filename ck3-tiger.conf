# The ck3-tiger.conf file is in standard Paradox script format.
# It should be placed in the top directory of your mod.

languages = {
	# This will check only english and german localizations
	check = "english"
	check = "german"

	# If you DON'T specify any check languages, you can instead say which ones to skip.
	skip = "french"
	skip = "spanish"

	# If you don't specify anything in languages, the validator will check all languages.
}

# There can be multiple ignore sections.
ignore = {
	# This will ignore the specified warnings.

	# Each key entry specifies a key to ignore.
	# The key names are in the output, in parentheses after ERROR or WARNING.
	# If there are no keys, all errors in the specified files will be ignored.
	key = brace-placement

	# Each file entry specifies a file in which to ignore the specified key or keys.
	# If there are no file entries, the keys are ignored in all files.
	file = events/POD_initialization/POD_maintenance_events.txt

	# The file entry can be a whole folder if you like.
	file = history/characters
}

# Use a load_mod section to tell ck3-tiger to load another mod before this one.
# This is useful when making submods or compatibility patch mods.
# You can have multiple load_mod sections.
#load_mod = {
#	# The label will be used in the error output to mark files from this mod
#	label = "FE"
#	# The path to the mod's .mod file. Use forward slashes.
#	modfile = "/home/gamer/Pdx/mod/FactionsExplained.mod"
#}

#characters = {
#	# Only warn about characters who are born by this date (usually your last bookmark)
#	only_born = "1511.1.1"  # optional
#}

# Sometimes ck3-tiger makes a mistake in determining the scope types expected
# by a scripted trigger or effect. Its conclusions can be overridden here.
# Scope overrides can be ALL (to accept any scope) or a list separated by |,
# like character|province|landed_title
scope_override = {
	artifact_low_rarity_trigger = ALL
	artifact_medium_rarity_trigger = ALL
	artifact_high_rarity_trigger = ALL
	artifact_region_trigger = ALL
}

# Optional block to control output styles and colors. Colors are enabled by default.
# Another way to disable all ANSI characters in the output is to supply the --no-color flag.
# That flag will override anything you define here, in the config file.
output_style = {
    # Default value is 'yes'.
    # If set to 'no', no ANSI characters will be added to the output and the output will not be colored.
    # Also, all other settings in this block will be ignored.
    enable = yes

    # Optional block to set the error color.
    error = {
        # Default is red. Supported values are Black, Red, Green, Yellow, Blue, Purple, Cyan, White.
        color = "red"
    }
    # Optional block to set the warning color.
    warning = {
        # Default is yellow. Supported values are Black, Red, Green, Yellow, Blue, Purple, Cyan, White.
        color = "yellow"
    }
    # Optional block to set the info color.
    info = {
        # Default is green. Supported values are Black, Red, Green, Yellow, Blue, Purple, Cyan, White.
        color = "green"
    }
    # Optional block to set the advice color.
    untidy = {
        # Default is blue. Supported values are Black, Red, Green, Yellow, Blue, Purple, Cyan, White.
        color = "cyan"
    }

}
